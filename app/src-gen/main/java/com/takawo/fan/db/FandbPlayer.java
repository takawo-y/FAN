package com.takawo.fan.db;

import java.util.List;
import com.takawo.fan.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table FANDB_PLAYER.
 */
public class FandbPlayer {

    private Long id;
    /** Not-null value. */
    private String playerName;
    /** Not-null value. */
    private String gameEvent;
    private long resultType;
    private String category;
    private String playerColor;
    private String playerFontColor;
    private String playerImagePath;
    private String playerComment;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FandbPlayerDao myDao;

    private List<FandbGame> games;

    public FandbPlayer() {
    }

    public FandbPlayer(Long id) {
        this.id = id;
    }

    public FandbPlayer(Long id, String playerName, String gameEvent, long resultType, String category, String playerColor, String playerFontColor, String playerImagePath, String playerComment) {
        this.id = id;
        this.playerName = playerName;
        this.gameEvent = gameEvent;
        this.resultType = resultType;
        this.category = category;
        this.playerColor = playerColor;
        this.playerFontColor = playerFontColor;
        this.playerImagePath = playerImagePath;
        this.playerComment = playerComment;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFandbPlayerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getPlayerName() {
        return playerName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPlayerName(String playerName) {
        this.playerName = playerName;
    }

    /** Not-null value. */
    public String getGameEvent() {
        return gameEvent;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setGameEvent(String gameEvent) {
        this.gameEvent = gameEvent;
    }

    public long getResultType() {
        return resultType;
    }

    public void setResultType(long resultType) {
        this.resultType = resultType;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getPlayerColor() {
        return playerColor;
    }

    public void setPlayerColor(String playerColor) {
        this.playerColor = playerColor;
    }

    public String getPlayerFontColor() {
        return playerFontColor;
    }

    public void setPlayerFontColor(String playerFontColor) {
        this.playerFontColor = playerFontColor;
    }

    public String getPlayerImagePath() {
        return playerImagePath;
    }

    public void setPlayerImagePath(String playerImagePath) {
        this.playerImagePath = playerImagePath;
    }

    public String getPlayerComment() {
        return playerComment;
    }

    public void setPlayerComment(String playerComment) {
        this.playerComment = playerComment;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FandbGame> getGames() {
        if (games == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FandbGameDao targetDao = daoSession.getFandbGameDao();
            List<FandbGame> gamesNew = targetDao._queryFandbPlayer_Games(id);
            synchronized (this) {
                if(games == null) {
                    games = gamesNew;
                }
            }
        }
        return games;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGames() {
        games = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
