package com.takawo.fan.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.takawo.fan.db.FandbPlayer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FANDB_PLAYER.
*/
public class FandbPlayerDao extends AbstractDao<FandbPlayer, Long> {

    public static final String TABLENAME = "FANDB_PLAYER";

    /**
     * Properties of entity FandbPlayer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property PlayerName = new Property(1, String.class, "playerName", false, "PLAYER_NAME");
        public final static Property GameEvent = new Property(2, String.class, "gameEvent", false, "GAME_EVENT");
        public final static Property ResultType = new Property(3, long.class, "resultType", false, "RESULT_TYPE");
        public final static Property CategoryId = new Property(4, String.class, "categoryId", false, "CATEGORY_ID");
        public final static Property PlayerColor = new Property(5, String.class, "playerColor", false, "PLAYER_COLOR");
        public final static Property PlayerImagePath = new Property(6, String.class, "playerImagePath", false, "PLAYER_IMAGE_PATH");
        public final static Property PlayerComment = new Property(7, String.class, "playerComment", false, "PLAYER_COMMENT");
    };

    private DaoSession daoSession;


    public FandbPlayerDao(DaoConfig config) {
        super(config);
    }
    
    public FandbPlayerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FANDB_PLAYER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ," + // 0: id
                "'PLAYER_NAME' TEXT NOT NULL ," + // 1: playerName
                "'GAME_EVENT' TEXT NOT NULL ," + // 2: gameEvent
                "'RESULT_TYPE' INTEGER NOT NULL ," + // 3: resultType
                "'CATEGORY_ID' TEXT," + // 4: categoryId
                "'PLAYER_COLOR' TEXT," + // 5: playerColor
                "'PLAYER_IMAGE_PATH' TEXT," + // 6: playerImagePath
                "'PLAYER_COMMENT' TEXT);"); // 7: playerComment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FANDB_PLAYER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FandbPlayer entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getPlayerName());
        stmt.bindString(3, entity.getGameEvent());
        stmt.bindLong(4, entity.getResultType());
 
        String categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindString(5, categoryId);
        }
 
        String playerColor = entity.getPlayerColor();
        if (playerColor != null) {
            stmt.bindString(6, playerColor);
        }
 
        String playerImagePath = entity.getPlayerImagePath();
        if (playerImagePath != null) {
            stmt.bindString(7, playerImagePath);
        }
 
        String playerComment = entity.getPlayerComment();
        if (playerComment != null) {
            stmt.bindString(8, playerComment);
        }
    }

    @Override
    protected void attachEntity(FandbPlayer entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FandbPlayer readEntity(Cursor cursor, int offset) {
        FandbPlayer entity = new FandbPlayer( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // playerName
            cursor.getString(offset + 2), // gameEvent
            cursor.getLong(offset + 3), // resultType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // categoryId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // playerColor
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // playerImagePath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // playerComment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FandbPlayer entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPlayerName(cursor.getString(offset + 1));
        entity.setGameEvent(cursor.getString(offset + 2));
        entity.setResultType(cursor.getLong(offset + 3));
        entity.setCategoryId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlayerColor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlayerImagePath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPlayerComment(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FandbPlayer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FandbPlayer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
