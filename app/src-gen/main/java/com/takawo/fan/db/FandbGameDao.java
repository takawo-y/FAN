package com.takawo.fan.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.takawo.fan.db.FandbGame;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FANDB_GAME.
*/
public class FandbGameDao extends AbstractDao<FandbGame, Long> {

    public static final String TABLENAME = "FANDB_GAME";

    /**
     * Properties of entity FandbGame.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PlayerId = new Property(0, long.class, "playerId", false, "PLAYER_ID");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property GameType = new Property(2, long.class, "gameType", false, "GAME_TYPE");
        public final static Property GameCategory = new Property(3, String.class, "gameCategory", false, "GAME_CATEGORY");
        public final static Property GameInfo = new Property(4, String.class, "gameInfo", false, "GAME_INFO");
        public final static Property Place = new Property(5, String.class, "place", false, "PLACE");
        public final static Property Weather = new Property(6, String.class, "weather", false, "WEATHER");
        public final static Property Temperature = new Property(7, String.class, "temperature", false, "TEMPERATURE");
        public final static Property GameDay = new Property(8, java.util.Date.class, "gameDay", false, "GAME_DAY");
        public final static Property StartTime = new Property(9, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(10, String.class, "endTime", false, "END_TIME");
        public final static Property Opposition = new Property(11, String.class, "opposition", false, "OPPOSITION");
        public final static Property Result = new Property(12, String.class, "result", false, "RESULT");
        public final static Property ResultScore = new Property(13, String.class, "resultScore", false, "RESULT_SCORE");
        public final static Property ResultTime = new Property(14, String.class, "resultTime", false, "RESULT_TIME");
        public final static Property Comment = new Property(15, String.class, "comment", false, "COMMENT");
    };

    private DaoSession daoSession;

    private Query<FandbGame> fandbPlayer_GamesQuery;

    public FandbGameDao(DaoConfig config) {
        super(config);
    }
    
    public FandbGameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FANDB_GAME' (" + //
                "'PLAYER_ID' INTEGER NOT NULL ," + // 0: playerId
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 1: id
                "'GAME_TYPE' INTEGER NOT NULL ," + // 2: gameType
                "'GAME_CATEGORY' TEXT," + // 3: gameCategory
                "'GAME_INFO' TEXT," + // 4: gameInfo
                "'PLACE' TEXT," + // 5: place
                "'WEATHER' TEXT," + // 6: weather
                "'TEMPERATURE' TEXT," + // 7: temperature
                "'GAME_DAY' INTEGER NOT NULL ," + // 8: gameDay
                "'START_TIME' TEXT," + // 9: startTime
                "'END_TIME' TEXT," + // 10: endTime
                "'OPPOSITION' TEXT," + // 11: opposition
                "'RESULT' TEXT," + // 12: result
                "'RESULT_SCORE' TEXT," + // 13: resultScore
                "'RESULT_TIME' TEXT," + // 14: resultTime
                "'COMMENT' TEXT);"); // 15: comment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FANDB_GAME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FandbGame entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPlayerId());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
        stmt.bindLong(3, entity.getGameType());
 
        String gameCategory = entity.getGameCategory();
        if (gameCategory != null) {
            stmt.bindString(4, gameCategory);
        }
 
        String gameInfo = entity.getGameInfo();
        if (gameInfo != null) {
            stmt.bindString(5, gameInfo);
        }
 
        String place = entity.getPlace();
        if (place != null) {
            stmt.bindString(6, place);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(7, weather);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(8, temperature);
        }
        stmt.bindLong(9, entity.getGameDay().getTime());
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(10, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(11, endTime);
        }
 
        String opposition = entity.getOpposition();
        if (opposition != null) {
            stmt.bindString(12, opposition);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(13, result);
        }
 
        String resultScore = entity.getResultScore();
        if (resultScore != null) {
            stmt.bindString(14, resultScore);
        }
 
        String resultTime = entity.getResultTime();
        if (resultTime != null) {
            stmt.bindString(15, resultTime);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(16, comment);
        }
    }

    @Override
    protected void attachEntity(FandbGame entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public FandbGame readEntity(Cursor cursor, int offset) {
        FandbGame entity = new FandbGame( //
            cursor.getLong(offset + 0), // playerId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.getLong(offset + 2), // gameType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gameCategory
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gameInfo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // place
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // weather
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // temperature
            new java.util.Date(cursor.getLong(offset + 8)), // gameDay
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // startTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // endTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // opposition
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // result
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // resultScore
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // resultTime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // comment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FandbGame entity, int offset) {
        entity.setPlayerId(cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setGameType(cursor.getLong(offset + 2));
        entity.setGameCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGameInfo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlace(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeather(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTemperature(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGameDay(new java.util.Date(cursor.getLong(offset + 8)));
        entity.setStartTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEndTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOpposition(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setResult(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setResultScore(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setResultTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setComment(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FandbGame entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FandbGame entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "games" to-many relationship of FandbPlayer. */
    public List<FandbGame> _queryFandbPlayer_Games(long playerId) {
        synchronized (this) {
            if (fandbPlayer_GamesQuery == null) {
                QueryBuilder<FandbGame> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlayerId.eq(null));
                fandbPlayer_GamesQuery = queryBuilder.build();
            }
        }
        Query<FandbGame> query = fandbPlayer_GamesQuery.forCurrentThread();
        query.setParameter(0, playerId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFandbPlayerDao().getAllColumns());
            builder.append(" FROM FANDB_GAME T");
            builder.append(" LEFT JOIN FANDB_PLAYER T0 ON T.'PLAYER_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected FandbGame loadCurrentDeep(Cursor cursor, boolean lock) {
        FandbGame entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FandbPlayer fandbPlayer = loadCurrentOther(daoSession.getFandbPlayerDao(), cursor, offset);
         if(fandbPlayer != null) {
            entity.setFandbPlayer(fandbPlayer);
        }

        return entity;    
    }

    public FandbGame loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<FandbGame> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<FandbGame> list = new ArrayList<FandbGame>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<FandbGame> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<FandbGame> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
