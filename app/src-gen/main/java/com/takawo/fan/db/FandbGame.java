package com.takawo.fan.db;

import com.takawo.fan.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table FANDB_GAME.
 */
public class FandbGame {

    private long playerId;
    private Long id;
    private long gameType;
    private String gameCategory;
    private String place;
    private String weather;
    private String temperature;
    /** Not-null value. */
    private java.util.Date gameDay;
    private String startTime;
    private String endTime;
    private String opposition;
    private String result;
    private String resultScore;
    private String resultTime;
    private String comment;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FandbGameDao myDao;

    private FandbPlayer fandbPlayer;
    private Long fandbPlayer__resolvedKey;


    public FandbGame() {
    }

    public FandbGame(Long id) {
        this.id = id;
    }

    public FandbGame(long playerId, Long id, long gameType, String gameCategory, String place, String weather, String temperature, java.util.Date gameDay, String startTime, String endTime, String opposition, String result, String resultScore, String resultTime, String comment) {
        this.playerId = playerId;
        this.id = id;
        this.gameType = gameType;
        this.gameCategory = gameCategory;
        this.place = place;
        this.weather = weather;
        this.temperature = temperature;
        this.gameDay = gameDay;
        this.startTime = startTime;
        this.endTime = endTime;
        this.opposition = opposition;
        this.result = result;
        this.resultScore = resultScore;
        this.resultTime = resultTime;
        this.comment = comment;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFandbGameDao() : null;
    }

    public long getPlayerId() {
        return playerId;
    }

    public void setPlayerId(long playerId) {
        this.playerId = playerId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getGameType() {
        return gameType;
    }

    public void setGameType(long gameType) {
        this.gameType = gameType;
    }

    public String getGameCategory() {
        return gameCategory;
    }

    public void setGameCategory(String gameCategory) {
        this.gameCategory = gameCategory;
    }

    public String getPlace() {
        return place;
    }

    public void setPlace(String place) {
        this.place = place;
    }

    public String getWeather() {
        return weather;
    }

    public void setWeather(String weather) {
        this.weather = weather;
    }

    public String getTemperature() {
        return temperature;
    }

    public void setTemperature(String temperature) {
        this.temperature = temperature;
    }

    /** Not-null value. */
    public java.util.Date getGameDay() {
        return gameDay;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setGameDay(java.util.Date gameDay) {
        this.gameDay = gameDay;
    }

    public String getStartTime() {
        return startTime;
    }

    public void setStartTime(String startTime) {
        this.startTime = startTime;
    }

    public String getEndTime() {
        return endTime;
    }

    public void setEndTime(String endTime) {
        this.endTime = endTime;
    }

    public String getOpposition() {
        return opposition;
    }

    public void setOpposition(String opposition) {
        this.opposition = opposition;
    }

    public String getResult() {
        return result;
    }

    public void setResult(String result) {
        this.result = result;
    }

    public String getResultScore() {
        return resultScore;
    }

    public void setResultScore(String resultScore) {
        this.resultScore = resultScore;
    }

    public String getResultTime() {
        return resultTime;
    }

    public void setResultTime(String resultTime) {
        this.resultTime = resultTime;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    /** To-one relationship, resolved on first access. */
    public FandbPlayer getFandbPlayer() {
        long __key = this.playerId;
        if (fandbPlayer__resolvedKey == null || !fandbPlayer__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FandbPlayerDao targetDao = daoSession.getFandbPlayerDao();
            FandbPlayer fandbPlayerNew = targetDao.load(__key);
            synchronized (this) {
                fandbPlayer = fandbPlayerNew;
            	fandbPlayer__resolvedKey = __key;
            }
        }
        return fandbPlayer;
    }

    public void setFandbPlayer(FandbPlayer fandbPlayer) {
        if (fandbPlayer == null) {
            throw new DaoException("To-one property 'playerId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.fandbPlayer = fandbPlayer;
            playerId = fandbPlayer.getId();
            fandbPlayer__resolvedKey = playerId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
